meta {
  name: Create collection [YAML]
  type: http
  seq: 2
}

post {
  url: {{host}}/api/jobs
  body: text
  auth: none
}

headers {
  Content-Type: application/x-yaml
}

body:text {
  config:
    page:          Dolomiti
    url:           https://it.wikipedia.org/wiki/Dolomiti
    tags:          ['user=devis','type=wiki','lang=it']
    isTest:        True
    chunkSize:     500
    chunkOverlap:  0
    chunkHeader:   ""
    tokenizer:     cl100k_base
    vectorModel:   openai-text-embedding-3-small
    vectorSize:    100
    
    # azureaisearch | InMemory | postgres | qdrant
    vectorStorage: InMemory
    
    collection:    italy2
    # .NET class mapping fields to storage. This is temporarily required to
    # use Filters when searching records with SK MEVD.
    dataModel:     MemoryRecord
    fields:
      - name: Id
        type: id
      - name: Embedding
        type: vector
        vectorSize: 100
        vectorDistance: CosineSimilarity
      - name: Chunk
        type: text
      - name: Tags
        type: listOfText
      - name: IsTest
        type: bool
      - name: Title
        type: text
      - name: Reference
        type: text
      - name: TimeStamp
        type: date
      - name: Other
        type: text
  
  _workflow:
    steps:
          
      # Delete data collection (just for tests)    
      - function: vector-storage-sk/delete-collection
        xin: >
          {
            storageType: start.config.vectorStorage,
            collection:  start.config.collection
          }
          
      # Create empty collection    
      - function: vector-storage-sk/create-collection
        xin: >
          {
            storageType: start.config.vectorStorage,
            collection:  start.config.collection, 
            fields:      start.config.fields
          }
  
      # Fetch sample content
      - function: wikipedia/it
        xin: >
          { 
            title: start.config.page 
          }
  
      # Split content in small chunks ready for vectorization
      - function: chunker/chunk
        id: chunking
        xin: >
          { 
            text:              state.content,
            maxTokensPerChunk: start.config.chunkSize,
            overlap:           start.config.chunkOverlap, 
            chunkHeader:       start.config.chunkHeader,
            tokenizer:         start.config.tokenizer
          }
  
      # Vectorize each chunk
      - function: embedding-generator/vectorize
        id: vectors
        xin: >
          { 
            inputs:     chunking.out.chunks,
            modelId:    start.config.vectorModel,
            dimensions: start.config.vectorSize
          }
          
      # Combine chunks and vectors. This could be done together with
      # the next function call, but we show it separately for demo purpose.
      # You can comment the next step to see the result of this transformation.
      - id: combine
        xin: >
          {
            values: map(&{
              Embedding: @[1],
              Chunk: @[0],
              Tags: $.start.config.tags,
              IsTest: $.start.config.isTest,
              Title: $.start.config.page,
              Reference: $.start.config.url
            }, zip(chunking.out.chunks, vectors.out.embeddings))
          }
  
      - function: vector-storage-sk/upsert
        xin: >
          {
            storageType: start.config.vectorStorage,
            collection:  start.config.collection,
            fields:      start.config.fields, 
            values:      combine.out.values
          }
  
}
