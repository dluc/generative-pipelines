meta {
  name: URL Ingestion
  type: http
  seq: 2
}

post {
  url: http://localhost:60000/api/jobs
  body: text
  auth: inherit
}

headers {
  Content-Type: application/x-yaml
}

body:text {
  input:
    sourceId: itwikidolomiti # This is a unique identifier to identify the records in the database, so they can be updated or deleted
    page: Dolomiti
    url: https://it.wikipedia.org/wiki/Dolomiti
    tags: [ 'user=devis','type=wiki','lang=it' ]
    isTest: True
    chunkSize: 500
    chunkOverlap: 0
    chunkHeader: ""
    tokenizer: cl100k_base
    vectorModel: openai-text-embedding-3-small
    vectorSize: 1536
  
    # azureaisearch | postgres | qdrant | InMemory
    vectorStorage: postgres
  
    collection: foo
    dataType: MemoryRecord
    fields:
      - name: Id
        type: id
      - name: Content
        type: text
      - name: ContentEmbedding
        type: vector
        vectorSize: 1536
        vectorDistance: CosineSimilarity
      - name: Tags
        type: listOfText
      - name: SourceId
        type: text
      - name: IsTest
        type: bool
      - name: Title
        type: text
      - name: Reference
        type: text
      - name: TimeStamp
        type: int
      - name: Other
        type: text
  
  _workflow:
    steps:
  
  #    # Delete data collection (in case the schema changed)
  #    - id: delete_collection
  #      function: vector-storage-sk/delete-collection
  #      xin: >
  #        {
  #          storageType: start.input.vectorStorage,
  #          collection:  start.input.collection
  #        }
  
      # Create record collection (if not exists)
      - id: create_collection
        function: vector-storage-sk/create-collection
        xin: >
          {
            storageType: start.input.vectorStorage,
            collection:  start.input.collection,
            fields:      start.input.fields
          }
  
      # Fetch a web page (file upload is supported too)
      - function: wikipedia/it
        id: wikipedia
        xin: >
          {
            title: start.input.page
          }
  
      # Split content in small chunks ready for vectorization
      - function: chunker/chunk
        id: chunking
        xin: >
          {
            text:              state.content,
            maxTokensPerChunk: start.input.chunkSize,
            overlap:           start.input.chunkOverlap,
            chunkHeader:       start.input.chunkHeader,
            tokenizer:         start.input.tokenizer
          }
  
      # Vectorize each chunk
      - function: embedding-generator/vectorize
        id: vectors
        xin: >
          {
            inputs:     chunking.out.chunks,
            modelId:    start.input.vectorModel,
            dimensions: start.input.vectorSize
          }
  
      # Combine chunks and vectors. This could be done together with
      # the next function call, but we show it separately for demo purpose.
      # You can comment the next step to see the result of this transformation.
      - id: combine
        xin: >
          {
            values: map(&{
              Content:          @[0],
              ContentEmbedding: @[1],
              SourceId:         $.start.input.sourceId,
              Tags:             $.start.input.tags,
              IsTest:           $.start.input.isTest,
              Title:            $.wikipedia.out.title,
              Reference:        $.start.input.url
            }, zip(chunking.out.chunks, vectors.out.embeddings))
          }
  
      # Find old records
      - id: find_old_records
        function: vector-storage-sk/search
        xin: >
          {
            storageType: start.input.vectorStorage,
            collection:  start.input.collection,
            dataType:    start.input.dataType,
            fields:      start.input.fields,
            filter:      join('',['SourceId eq ','\'',$.start.input.sourceId,'\'']),
            skip:        `0`,
            top:         `100`
          }
        xout: >
          {
            results: state.results[*].{value: {
              id: value.id,
              sourceId: value.sourceId
            }}
          }
  
      # Delete old records
      #- function: vector-storage-sk/delete
      #  xin: >
      #    find_old_records.out.results[*].value.id
  
      # Stop
      #- function: break
  
      # Store records
      - function: vector-storage-sk/upsert
        xin: >
          {
            storageType: start.input.vectorStorage,
            collection:  start.input.collection,
            fields:      start.input.fields,
            values:      combine.out.values
          }
  
      # ...
      # - generate graph
      # - store graph
      # - etc
      # ...
  
}
